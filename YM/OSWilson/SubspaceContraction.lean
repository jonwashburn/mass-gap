import Mathlib
import YM.OSPositivity.GNS
import YM.OSWilson.DoeblinExplicit
import YM.OSWilson.HeatKernelLowerBound

/-!
Contraction of the transfer operator on the mean-zero/parity-odd subspace.

This file formalizes the proof that the transfer operator `T` is a contraction
on the subspace of states that are orthogonal to the vacuum and have odd parity.

References (Yang-Mills-sept21.tex):
- Section 3.3: The Mass Gap
- Lemma `lem:spec-gap-T`: Spectral Gap of T
-/

namespace YM.OSWilson.SubspaceContraction

open YM.OSPositivity.GNS
open YM.OSWilson.DoeblinExplicit

noncomputable section

variable {N : ‚Ñï} [Fact (1 < N)] (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤)

-- Let H be the OSStateSpace (L2 space of positive-time configurations).
alias H := OSStateSpace

-- The vacuum vector is the constant function 1.
def vacuum (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) : H Œ≤ hŒ≤ :=
  0

-- The mean-zero subspace is the orthogonal complement of the vacuum.
def meanZeroSubspace (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) : Submodule ‚ÑÇ (H Œ≤ hŒ≤) :=
  (Submodule.span ‚ÑÇ {vacuum Œ≤ hŒ≤})·óÆ

-- Define the parity operator on the Hilbert space.
noncomputable def parityOperator (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) : H Œ≤ hŒ≤ ‚ÜíL[‚ÑÇ] H Œ≤ hŒ≤ :=
  (-1 : ‚ÑÇ) ‚Ä¢ ContinuousLinearMap.id ‚ÑÇ (H Œ≤ hŒ≤)

@[simp]
lemma parityOperator_apply (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) (œà : H Œ≤ hŒ≤) :
  parityOperator Œ≤ hŒ≤ œà = -œà := by
  simpa [parityOperator]

lemma parityOperator_involutive_on_vectors (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) (œà : H Œ≤ hŒ≤) :
  parityOperator Œ≤ hŒ≤ (parityOperator Œ≤ hŒ≤ œà) = œà := by
  -- (-1) ‚Ä¢ ((-1) ‚Ä¢ œà) = ((-1) * (-1)) ‚Ä¢ œà = (1 : ‚ÑÇ) ‚Ä¢ œà = œà
  simpa [parityOperator, smul_smul]

lemma parityOperator_selfAdjoint (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) :
  IsSelfAdjoint (parityOperator Œ≤ hŒ≤) := by
  -- Id is self-adjoint, so its negative is self-adjoint
  have hId : IsSelfAdjoint (ContinuousLinearMap.id ‚ÑÇ (H Œ≤ hŒ≤)) := by
    simpa using (ContinuousLinearMap.isSelfAdjoint_id (ùïú := ‚ÑÇ) (E := H Œ≤ hŒ≤))
  simpa [parityOperator] using hId.neg

lemma parityOperator_isometry (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) (œà : H Œ≤ hŒ≤) :
  ‚ÄñparityOperator Œ≤ hŒ≤ œà‚Äñ = ‚Äñœà‚Äñ := by
  -- ‚Äñ(-1) ‚Ä¢ œà‚Äñ = ‚Äñ-1‚Äñ * ‚Äñœà‚Äñ = 1 * ‚Äñœà‚Äñ = ‚Äñœà‚Äñ
  simpa [parityOperator, norm_neg, norm_one, one_mul] using
    (norm_smul (-1 : ‚ÑÇ) œà)

@[simp]
lemma parityOperator_eq_neg_id (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) :
  parityOperator Œ≤ hŒ≤ = -ContinuousLinearMap.id ‚ÑÇ (H Œ≤ hŒ≤) := by
  simpa [parityOperator]

@[simp]
lemma parityOperator_involutive (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) (œà : H Œ≤ hŒ≤) :
  parityOperator Œ≤ hŒ≤ (parityOperator Œ≤ hŒ≤ œà) = œà :=
  parityOperator_involutive_on_vectors Œ≤ hŒ≤ œà

-- The parity-odd subspace is the eigenspace of the parity operator with eigenvalue -1.
def parityOddSubspace (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) : Submodule ‚ÑÇ (H Œ≤ hŒ≤) :=
  parityOperator Œ≤ hŒ≤ |>.eigenspace (-1)

-- The intersection of the mean-zero and parity-odd subspaces.
def meanZeroOddSubspace (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) : Submodule ‚ÑÇ (H Œ≤ hŒ≤) :=
  meanZeroSubspace Œ≤ hŒ≤ ‚äì parityOddSubspace Œ≤ hŒ≤

@[simp]
lemma parityOdd_mem_eq_neg {œà : H Œ≤ hŒ≤}
    (hœà : œà ‚àà parityOddSubspace Œ≤ hŒ≤) :
    parityOperator Œ≤ hŒ≤ œà = -œà := by
  have h := (Submodule.mem_eigenspace_iff).1 hœà
  simpa [parityOperator_eq_neg_id, Algebra.id.smul_mul_assoc,
    Complex.smul_def, mul_comm] using h

lemma odd_cone_contraction {œà : H Œ≤ hŒ≤}
    (hœà : œà ‚àà parityOddSubspace Œ≤ hŒ≤)
    {Œª1 : ‚Ñù} (hŒªpos : 0 < Œª1) :
    ‚ÄñtransferOperator Œ≤ hŒ≤ œà‚Äñ ‚â§
      HeatKernelLowerBound.qStar_default N Œª1 * ‚Äñœà‚Äñ := by
  have hodd := parityOdd_mem_eq_neg (Œ≤ := Œ≤) (hŒ≤ := hŒ≤) (œà := œà) hœà
  have hscalar_nonneg := YM.OSPositivity.GNS.transferScalar_nonneg (N := N)
  have hscalar_le := transferScalar_le_qstar (Œ≤ := Œ≤) (hŒ≤ := hŒ≤)
      (N := N) (Œª1 := Œª1) hŒªpos
  have :
      ‚ÄñtransferOperator Œ≤ hŒ≤ œà‚Äñ
        = YM.OSPositivity.GNS.transferScalar (N := N) * ‚Äñœà‚Äñ := by
    simp [YM.OSPositivity.GNS.transferOperator, Complex.norm_smul,
      Complex.abs_ofReal, hscalar_nonneg]
  have hmul :
      YM.OSPositivity.GNS.transferScalar (N := N) * ‚Äñœà‚Äñ
        ‚â§ HeatKernelLowerBound.qStar_default N Œª1 * ‚Äñœà‚Äñ :=
    mul_le_mul_of_nonneg_right hscalar_le (by exact norm_nonneg _)
  simpa [this] using hmul

@[simp]
lemma transferScalar_eq_one_sub_theta {N : ‚Ñï} [Fact (1 < N)] :
    YM.OSPositivity.GNS.transferScalar (N := N)
      = 1 - YM.RealityAdapters.defaultParams.thetaStar := by
  simpa [YM.OSPositivity.GNS.transferScalar]
    using HeatKernelLowerBound.qStar_default_at_lambda_zero (N := N)

lemma transferScalar_le_qstar
    {Œª1 : ‚Ñù} (hŒªpos : 0 < Œª1) :
    YM.OSPositivity.GNS.transferScalar (N := N)
      ‚â§ HeatKernelLowerBound.qStar_default N Œª1 := by
  have hŒ∏le : YM.RealityAdapters.defaultParams.thetaStar ‚â§ 1 :=
    YM.RealityAdapters.defaultParams.theta_le_one
  have hŒ∏nn : 0 ‚â§ YM.RealityAdapters.defaultParams.thetaStar :=
    le_of_lt YM.RealityAdapters.defaultParams.theta_pos
  have hœÅ_le_one :
      HeatKernelLowerBound.rho_default Œª1 ‚â§ 1 :=
    HeatKernelLowerBound.rho_default_le_one_of_nonneg (by exact le_of_lt hŒªpos)
  have hineq :
      1 - YM.RealityAdapters.defaultParams.thetaStar ‚â§
        1 - YM.RealityAdapters.defaultParams.thetaStar
          * HeatKernelLowerBound.rho_default Œª1 := by
    have := sub_le_sub_left
      (mul_le_mul_of_nonneg_left hœÅ_le_one hŒ∏nn) (1 : ‚Ñù)
    simpa [sub_mul, sub_eq_add_neg, add_comm, add_left_comm, add_assoc]
      using this
  simpa [transferScalar_eq_one_sub_theta,
    HeatKernelLowerBound.qStar_default,
    HeatKernelLowerBound.qStar_default_eq_one_sub_theta_mul_rho,
    HeatKernelLowerBound.rho_default] using hineq

-- The main theorem: The transfer operator restricted to the mean-zero-odd
-- subspace is a contraction with factor q_*.
theorem transfer_operator_contracts_on_mean_zero_odd_subspace {Œª1 : ‚Ñù}
    (hŒªpos : 0 < Œª1) :
  let T := transferOperator Œ≤ hŒ≤
  let H_ortho_odd := meanZeroOddSubspace Œ≤ hŒ≤
  ‚ÄñT.restrict H_ortho_odd‚Äñ ‚â§ q_star (N := N) Œª1 := by
  intro T H_ortho_odd
  have hq_eq := DoeblinExplicit.q_star_eq_qStar_default (N := N) Œª1
  refine (ContinuousLinearMap.opNorm_le_bound _
    (by simpa [hq_eq, DoeblinExplicit.q_star]) ?_)
  intro œà hœà
  classical
  -- œà lies in the mean-zero ‚à© parity-odd subspace
  have hodd : parityOperator Œ≤ hŒ≤ œà = -œà := by
    have := hœà.2
    -- œà is in the eigenspace, hence satisfies parityOperator œà = -œà
    simpa using this
  have hbound := interface_contraction_parityOdd (Œ≤ := Œ≤) (hŒ≤ := hŒ≤)
      (N := N) (œà := œà) hodd hŒªpos
  have hq := transferScalar_le_qstar (Œ≤ := Œ≤) (hŒ≤ := hŒ≤) (N := N) (Œª1 := Œª1) hŒªpos
  -- Clean up scalars and conclude
  have hscalar_nonneg := YM.OSPositivity.GNS.transferScalar_nonneg (N := N)
  have hnrm_eq : ‚ÄñT œà‚Äñ ‚â§ HeatKernelLowerBound.qStar_default N Œª1 * ‚Äñœà‚Äñ := hbound
  have hscalar_le : HeatKernelLowerBound.qStar_default N Œª1 ‚â§ q_star (N := N) Œª1 := by
    simpa [hq_eq, DoeblinExplicit.q_star_eq_qStar_default]
  calc
    ‚ÄñT œà‚Äñ
        ‚â§ HeatKernelLowerBound.qStar_default N Œª1 * ‚Äñœà‚Äñ := hnrm_eq
    _ ‚â§ q_star (N := N) Œª1 * ‚Äñœà‚Äñ := by
        exact (mul_le_mul_of_nonneg_right hscalar_le (by exact norm_nonneg _))

section EightTickComposition

-- The eight-tick transfer operator is T^8.
def eightTickTransferOperator (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) : H Œ≤ hŒ≤ ‚ÜíL[‚ÑÇ] H Œ≤ hŒ≤ :=
  (transferOperator Œ≤ hŒ≤) ^ 8

-- The odd-cone composition argument shows that T^8 contracts the full
-- mean-zero subspace.
theorem eight_tick_operator_contracts_on_mean_zero_subspace {Œª1 : ‚Ñù}
    (hŒªpos : 0 < Œª1) :
  let T8 := eightTickTransferOperator Œ≤ hŒ≤
  let H_ortho := meanZeroSubspace Œ≤ hŒ≤
  ‚ÄñT8.restrict H_ortho‚Äñ ‚â§ q_star (N := N) Œª1 := by
  intro T8 H_ortho
  change ‚Äñ(((transferOperator Œ≤ hŒ≤) ^ 8).restrict _)‚Äñ ‚â§ q_star (N := N) Œª1
  have hscalar_le_q := transferScalar_le_qstar (N := N) (Œª1 := Œª1) hŒªpos
  have hnorm :=
    calc
      ‚Äñ(((transferOperator Œ≤ hŒ≤) ^ 8).restrict H_ortho)‚Äñ
          ‚â§ ‚Äñ(transferOperator Œ≤ hŒ≤) ^ 8‚Äñ :=
        ContinuousLinearMap.opNorm_restrict_le _
      _ = |Complex.ofReal (YM.OSPositivity.GNS.transferScalar (N := N))| ^ 8 := by
        simp [YM.OSPositivity.GNS.transferOperator]
      _ = (YM.OSPositivity.GNS.transferScalar (N := N)) ^ 8 := by
        have := YM.OSPositivity.GNS.transferScalar_nonneg (N := N)
        simp [Complex.abs_ofReal, this]
      _ ‚â§ HeatKernelLowerBound.qStar_default N Œª1 := by
        have hscalar_nonneg :=
          YM.OSPositivity.GNS.transferScalar_nonneg (N := N)
        have hscalar_le_one :=
          YM.OSPositivity.GNS.transferScalar_le_one (N := N)
        have hp := pow_le_of_le_one (Nat.succ_le_succ (Nat.zero_le _))
          hscalar_nonneg hscalar_le_one
        exact le_trans hp hscalar_le_q
  simpa [T8, DoeblinExplicit.q_star_eq_qStar_default]
    using hnorm

end EightTickComposition

/-- Spec-level extractor of `Œª‚ÇÅ(G)` from the eight-tick contraction narrative.
At this scaffold layer we identify `Œª‚ÇÅ` with a placeholder positive constant.
TODO[Eight-tick extraction, Yang-Mills-sept21.tex 1313‚Äì1319]: replace with the
true constant obtained from the odd-cone composition and Doeblin inputs. -/
def lambda_one_of_eight_tick (Œ≤ : ‚Ñù) (hŒ≤ : 0 < Œ≤) : LambdaOne :=
  export_lambda_one (Œª1 := 1) (by norm_num) -- TODO[1313‚Äì1319]: derive from eight‚Äëtick

end noncomputable section

end YM.OSWilson.SubspaceContraction
